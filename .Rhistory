)
#| label: exploratory-analysis-q2
data |>
group_by(year, top_genre) |>
mutate(
avg_pop = mean(pop),
n = n()
) |>
relocate(year, top_genre, avg_pop, n)
#| label: exploratory-analysis-q2
data |>
group_by(year, top_genre) |>
summarize(
avg_pop = mean(pop),
n = n()
) |>
relocate(year, top_genre, avg_pop, n)
#| label: exploratory-analysis-q2
data |>
group_by(year, top_genre) |>
summarize(
avg_pop = mean(pop),
n = n(),
.groups = "drop"
) |>
relocate(year, top_genre, avg_pop, n)
#| label: exploratory-analysis-q2
ytg_pop_data <- data |>
group_by(year, top_genre) |>
summarize(
avg_pop = mean(pop),
n = n(),
.groups = "drop"
) |>
relocate(year, top_genre, avg_pop, n)
ytg_pop_data |> filter(year == 2010, top_genre == `neo mellow`)
View(ytg_pop_data)
ytg_pop_data |> filter(year == 2010, top_genre == "neo mellow")
ytg_pop_data |> filter(year == 2010, top_genre == "neo mellow") |> select(avg_pop)
ytg_pop_data |> filter(year == 2010, top_genre == "neo mellow") |> select(avg_pop)[1]
ytg_pop_data |> filter(year == 2010, top_genre == "neo mellow") |> select(avg_pop)$1
ytg_pop_data |> filter(year == 2010, top_genre == "neo mellow") |> select(avg_pop)$avg_pop
ytg_pop_data |>
filter(year == 2010, top_genre == "neo mellow") |>
pull(avg_pop)
avg_pop_result <- ytg_pop_data |>
filter(year == 2010, top_genre == "neo mellow") |>
pull(avg_pop)
ytg_pop_data |>
filter(year == 2010, top_genre == "dance pop") |>
pull(n)
View(ytg_pop_data)
#| label: exploratory-analysis-q2-plotting
ytg_pop_data |>
ggplot(aes(x = year, y = avg_pop, colour = top_genre)) +
geom_point()
ytg_pop_data |>
ggplot(aes(x = year, y = avg_pop, colour = top_genre)) +
geom_point()
#| label: setup
#| include: false
library(tidyverse)
library(readxl)
raw_data <- read_csv("data/top10s.csv")
#| label: overview
#| echo: false
head(raw_data)
#| label: column-types
str(raw_data)
#| label: data-values
raw_data |>
summarize(across(everything(), function(x) sum(is.na(x))))
#| label: missing-incorrect-values
raw_data |>
filter(if_any(c(nrgy, dnce, live, val, acous, spch, pop), ~ . <= 1 | . >= 99))
# This doesn't really filter anything down for us, due to the acous column (Some songs may not be using acoustic sounds)
raw_data |>
filter(if_any(c(nrgy, dnce, live, val, spch, pop), ~ . <= 1 | . >= 99))
#| label: data-cleaning
data <- raw_data |>
select(-`...1`) |>
filter(title != "Million Years Ago") |>
rename(
top_genre = `top genre`,
energy = nrgy,
dance = dnce,
speech = spch
)
#| label: exploratory-analysis-q1
data |>
ggplot(aes(x = dur, y = pop)) +
geom_point()
# There doesn't appear to be much correlation between the two. Let's create a bar plot where duration and popularity are both binned for a different perspective.
dbreaks = c(0, 150, 180, 240, 300, 480)
pbreaks = c(100, 80, 60, 40, 20, 0)
data |>
group_by(dur_bin = cut(dur, dbreaks)) |>
mutate(
avg_pop = round(mean(pop)),
n = n()
) |>
ggplot(aes(x = dur_bin, y = avg_pop)) +
geom_bar(stat = "identity", position = "dodge") +
labs(x = "Duration Binned (Seconds)", y = "Average Popularity") +
theme_minimal()
# We can maybe see some sort of correlation here. The longer a song is the less popular it is. Lets expand on our first graph to include a regression line through our points.
data |>
ggplot(aes(x = dur, y = pop)) +
geom_point() +
geom_smooth(method = "lm")
# Here we can see some potential negative correlation between duration and popularity. Finally lets look at a linear model using `lm`
pop_dur_lmodel <- lm(pop ~ dur, data = data)
summary(pop_dur_lmodel)
# So for every unit increase in duration (e.g. an additional second) we can expect popularity to fall by 0.044 on average (3 d.p.). This is statistically significant to a strong degree (The probability that the results we've seen are due to chance are less than 1%)
correlation_value <- round(cor(data$pop, data$dur), 4)
print(paste("Correlation coefficient:", correlation_value))
# However, we can see that this is a very negligible negative correlation
#| label: exploratory-analysis-q2-initial
ytg_pop_data <- data |>
group_by(year, top_genre) |>
summarize(
avg_pop = mean(pop),
n = n(),
.groups = "drop"
) |>
relocate(year, top_genre, avg_pop, n)
ytg_pop_data
#| label: exploratory-analysis-q2-hidden
#| echo: false
avg_pop_result_neo_mellow <- ytg_pop_data |>
filter(year == 2010, top_genre == "neo mellow") |>
pull(avg_pop)
avg_pop_result_dance_pop <- ytg_pop_data |>
filter(year == 2010, top_genre == "dance pop") |>
pull(avg_pop)
n_result <- ytg_pop_data |>
filter(year == 2010, top_genre == "dance pop") |>
pull(n)
#| label: exploratory-analysis-q2-different-approach
ytg_pop_data
#| label: exploratory-analysis-q2-different-approach
ytg_pop_data |>
filter(n >= 3)
#| label: exploratory-analysis-q2-different-approach
ytg_pop_data |>
filter(n >= 3) |>
ggplot(aes(x = year, y = avg_pop, colour = top_genre)) +
geom_point()
#| label: exploratory-analysis-q2-different-approach
ytg_pop_data |>
filter(n >= 4) |>
ggplot(aes(x = year, y = avg_pop, colour = top_genre)) +
geom_point()
ytg_pop_data |>
filter(n >= 4) |>
ggplot(aes(x = year, y = avg_pop, colour = top_genre)) +
geom_point()
#| label: exploratory-analysis-q2-overloaded-legend
ytg_pop_data |>
ggplot(aes(x = year, y = n, colour = top_genre)) +
geom_point()
?theme
#| label: exploratory-analysis-q2-overloaded-legend
ytg_pop_data |>
ggplot(aes(x = year, y = n, colour = top_genre)) +
geom_point() +
theme(legend.position = "bottom")
raw_data
y(raw_data$year)
as.Date(raw_data$year)
ymd(raw_data$year)
make_datetime(raw_data$year)
#| label: data-cleaning
data <- raw_data |>
select(-`...1`) |>
filter(title != "Million Years Ago") |>
mutate(year = as.character(year))
rename(
top_genre = `top genre`,
energy = nrgy,
dance = dnce,
speech = spch
)
#| label: data-cleaning
data <- raw_data |>
select(-`...1`) |>
filter(title != "Million Years Ago") |>
mutate(year = as.character(year)) |>
rename(
top_genre = `top genre`,
energy = nrgy,
dance = dnce,
speech = spch
)
#| label: setup
#| include: false
library(tidyverse)
library(readxl)
raw_data <- read_csv("data/top10s.csv")
#| label: overview
#| echo: false
head(raw_data)
#| label: column-types
str(raw_data)
#| label: data-values
raw_data |>
summarize(across(everything(), function(x) sum(is.na(x))))
#| label: missing-incorrect-values
raw_data |>
filter(if_any(c(nrgy, dnce, live, val, acous, spch, pop), ~ . <= 1 | . >= 99))
# This doesn't really filter anything down for us, due to the acous column (Some songs may not be using acoustic sounds)
raw_data |>
filter(if_any(c(nrgy, dnce, live, val, spch, pop), ~ . <= 1 | . >= 99))
#| label: data-cleaning
data <- raw_data |>
select(-`...1`) |>
filter(title != "Million Years Ago") |>
mutate(year = as.character(year)) |>
rename(
top_genre = `top genre`,
energy = nrgy,
dance = dnce,
speech = spch
)
#| label: exploratory-analysis-q1
data |>
ggplot(aes(x = dur, y = pop)) +
geom_point()
# There doesn't appear to be much correlation between the two. Let's create a bar plot where duration and popularity are both binned for a different perspective.
dbreaks = c(0, 150, 180, 240, 300, 480)
pbreaks = c(100, 80, 60, 40, 20, 0)
data |>
group_by(dur_bin = cut(dur, dbreaks)) |>
mutate(
avg_pop = round(mean(pop)),
n = n()
) |>
ggplot(aes(x = dur_bin, y = avg_pop)) +
geom_bar(stat = "identity", position = "dodge") +
labs(x = "Duration Binned (Seconds)", y = "Average Popularity") +
theme_minimal()
# We can maybe see some sort of correlation here. The longer a song is the less popular it is. Lets expand on our first graph to include a regression line through our points.
data |>
ggplot(aes(x = dur, y = pop)) +
geom_point() +
geom_smooth(method = "lm")
# Here we can see some potential negative correlation between duration and popularity. Finally lets look at a linear model using `lm`
pop_dur_lmodel <- lm(pop ~ dur, data = data)
summary(pop_dur_lmodel)
# So for every unit increase in duration (e.g. an additional second) we can expect popularity to fall by 0.044 on average (3 d.p.). This is statistically significant to a strong degree (The probability that the results we've seen are due to chance are less than 1%)
correlation_value <- round(cor(data$pop, data$dur), 4)
print(paste("Correlation coefficient:", correlation_value))
# However, we can see that this is a very negligible negative correlation
#| label: exploratory-analysis-q2-initial
ytg_pop_data <- data |>
group_by(year, top_genre) |>
summarize(
avg_pop = mean(pop),
n = n(),
.groups = "drop"
) |>
relocate(year, top_genre, avg_pop, n)
ytg_pop_data
#| label: exploratory-analysis-q2-hidden
#| echo: false
avg_pop_result_neo_mellow <- ytg_pop_data |>
filter(year == 2010, top_genre == "neo mellow") |>
pull(avg_pop)
avg_pop_result_dance_pop <- ytg_pop_data |>
filter(year == 2010, top_genre == "dance pop") |>
pull(avg_pop)
n_result <- ytg_pop_data |>
filter(year == 2010, top_genre == "dance pop") |>
pull(n)
#| label: exploratory-analysis-q2-overloaded-legend
ytg_pop_data |>
ggplot(aes(x = year, y = n, colour = top_genre)) +
geom_point() +
theme(legend.position = "bottom")
#| label: exploratory-analysis-q2-different-approach
ytg_pop_data |>
filter(n >= 4) |>
ggplot(aes(x = year, y = n, colour = top_genre)) +
geom_point()
#| label: exploratory-analysis-q2-different-approach
ytg_pop_data |>
filter(n >= 4) |>
ggplot(aes(x = year, y = n, colour = top_genre)) +
geom_bar(stat = "identity")
#| label: exploratory-analysis-q2-different-approach
ytg_pop_data |>
filter(n >= 4) |>
ggplot(aes(x = year, y = n, fill = top_genre)) +
geom_bar(stat = "identity")
#| label: exploratory-analysis-q2-different-approach
ytg_pop_data |>
filter(n >= 4) |>
ggplot(aes(x = year, y = n, fill = top_genre)) +
geom_bar(stat = "identity", position = "dodge")
?position_dodge
#| label: exploratory-analysis-q2-different-approach
ytg_pop_data |>
filter(n >= 4) |>
ggplot(aes(x = year, y = n, fill = top_genre)) +
geom_bar(stat = "identity", position = position_dodge(width = 0.8))
#| label: exploratory-analysis-q2-different-approach
ytg_pop_data |>
filter(n >= 4) |>
ggplot(aes(x = year, y = n, fill = top_genre)) +
geom_bar(stat = "identity", position = position_dodge(width = 0.8)) +
scale_x_discrete(expand = c(0.5, 0))
#| label: exploratory-analysis-q2-different-approach
ytg_pop_data |>
filter(n >= 4) |>
ggplot(aes(x = year, y = n, fill = top_genre)) +
geom_bar(stat = "identity", position = position_dodge(width = 0.8))
#| label: exploratory-analysis-q2-different-approach
ytg_pop_data |>
filter(n >= 4) |>
ggplot(aes(x = year, y = n, fill = top_genre)) +
geom_bar(stat = "identity", position = position_dodge(width = 0.5))
#| label: exploratory-analysis-q2-different-approach
ytg_pop_data |>
filter(n >= 4) |>
ggplot(aes(x = year, y = n, fill = top_genre)) +
geom_bar(stat = "identity", position = position_dodge(padding = 0.2))
#| label: exploratory-analysis-q2-different-approach
ytg_pop_data |>
filter(n >= 4) |>
ggplot(aes(x = year, y = n, fill = top_genre)) +
geom_bar(stat = "identity",
position = position_dodge(padding = 0.2))
#| label: exploratory-analysis-q2-different-approach
ytg_pop_data |>
filter(n >= 4) |>
ggplot(aes(x = year, y = n, fill = top_genre)) +
geom_bar(stat = "identity",
position = position_dodge(width = 0.1))
#| label: exploratory-analysis-q2-different-approach
ytg_pop_data |>
filter(n >= 4) |>
ggplot(aes(x = as.factor(year), y = n, fill = top_genre)) +
geom_bar(stat = "identity",
position = position_dodge(width = 0.1))
#| label: exploratory-analysis-q2-different-approach
ytg_pop_data |>
filter(n >= 4) |>
ggplot(aes(x = year, y = n, fill = top_genre)) +
geom_bar(stat = "identity",
position = "dodge")
View(data)
data |> filter(top_genre == "boy band", year == "2013")
data |> filter(top_genre == "neo mellow", year == "2014")
#| label: exploratory-analysis-q3-correlation
cor(data)
#| label: exploratory-analysis-q3-correlation
cor(data)
?cor
type(data)
typeof(data)
as.vec(data)
as.vector(data)
#| label: exploratory-analysis-q3-correlation
cor(as.vector(data))
data
head(data)
install.packages("corrplot")
#| label: setup
#| include: false
library(tidyverse)
library(readxl)
library(corrplot)
raw_data <- read_csv("data/top10s.csv")
#| label: exploratory-analysis-q3-correlation
corrplot::corrplot(data)
?corrplot
View(data)
data |>
filter(where(is.numeric()))
data |>
filter(across(everything(), is.numeric))
data |>
filter(across(everything(), !is.numeric))
data %>%
filter(!across(everything(), is.numeric))
data |>
filter(across(everything(), is.numeric))
?if_any
data |>
filter(if_any(is.numeric()))
data |>
select(across(where(is.numeric())))
data |>
select(across(where(is.numeric))
data |>
data |>
select(across(where(is.numeric)))
data |>
select(where(is.numeric))
corr_data <- data |>
select(where(is.numeric))
corrplot(corr_data)
cor(corr_data)
#| label: setup
#| include: false
library(tidyverse)
library(readxl)
library(corrplot)
raw_data <- read_csv("data/top10s.csv")
#| label: exploratory-analysis-q3-correlation
corr_data <- data |>
select(where(is.numeric))
#| label: setup
#| include: false
library(tidyverse)
library(readxl)
library(corrplot)
raw_data <- read_csv("data/top10s.csv")
#| label: overview
#| echo: false
head(raw_data)
#| label: column-types
str(raw_data)
#| label: data-values
raw_data |>
summarize(across(everything(), function(x) sum(is.na(x))))
#| label: missing-incorrect-values
raw_data |>
filter(if_any(c(nrgy, dnce, live, val, acous, spch, pop), ~ . <= 1 | . >= 99))
# This doesn't really filter anything down for us, due to the acous column (Some songs may not be using acoustic sounds)
raw_data |>
filter(if_any(c(nrgy, dnce, live, val, spch, pop), ~ . <= 1 | . >= 99))
#| label: data-cleaning
data <- raw_data |>
select(-`...1`) |>
filter(title != "Million Years Ago") |>
mutate(year = as.character(year)) |>
rename(
top_genre = `top genre`,
energy = nrgy,
dance = dnce,
speech = spch
)
#| label: exploratory-analysis-q1
data |>
ggplot(aes(x = dur, y = pop)) +
geom_point()
# There doesn't appear to be much correlation between the two. Let's create a bar plot where duration and popularity are both binned for a different perspective.
dbreaks = c(0, 150, 180, 240, 300, 480)
pbreaks = c(100, 80, 60, 40, 20, 0)
data |>
group_by(dur_bin = cut(dur, dbreaks)) |>
mutate(
avg_pop = round(mean(pop)),
n = n()
) |>
ggplot(aes(x = dur_bin, y = avg_pop)) +
geom_bar(stat = "identity", position = "dodge") +
labs(x = "Duration Binned (Seconds)", y = "Average Popularity") +
theme_minimal()
# We can maybe see some sort of correlation here. The longer a song is the less popular it is. Lets expand on our first graph to include a regression line through our points.
data |>
ggplot(aes(x = dur, y = pop)) +
geom_point() +
geom_smooth(method = "lm")
# Here we can see some potential negative correlation between duration and popularity. Finally lets look at a linear model using `lm`
pop_dur_lmodel <- lm(pop ~ dur, data = data)
summary(pop_dur_lmodel)
# So for every unit increase in duration (e.g. an additional second) we can expect popularity to fall by 0.044 on average (3 d.p.). This is statistically significant to a strong degree (The probability that the results we've seen are due to chance are less than 1%)
correlation_value <- round(cor(data$pop, data$dur), 4)
print(paste("Correlation coefficient:", correlation_value))
# However, we can see that this is a very negligible negative correlation
#| label: exploratory-analysis-q2-initial
ytg_pop_data <- data |>
group_by(year, top_genre) |>
summarize(
avg_pop = mean(pop),
n = n(),
.groups = "drop"
) |>
relocate(year, top_genre, avg_pop, n)
ytg_pop_data
#| label: exploratory-analysis-q2-hidden
#| echo: false
avg_pop_result_neo_mellow <- ytg_pop_data |>
filter(year == 2010, top_genre == "neo mellow") |>
pull(avg_pop)
avg_pop_result_dance_pop <- ytg_pop_data |>
filter(year == 2010, top_genre == "dance pop") |>
pull(avg_pop)
n_result <- ytg_pop_data |>
filter(year == 2010, top_genre == "dance pop") |>
pull(n)
#| label: exploratory-analysis-q2-overloaded-legend
ytg_pop_data |>
ggplot(aes(x = year, y = n, colour = top_genre)) +
geom_point() +
theme(legend.position = "bottom")
#| label: exploratory-analysis-q2-different-approach
ytg_pop_data |>
filter(n >= 4) |> # Drop genres that dont appear at least 4 times
ggplot(aes(x = year, y = n, fill = top_genre)) +
geom_bar(stat = "identity",
position = "dodge")
#| label: exploratory-analysis-q3-correlation
corr_data <- data |>
select(where(is.numeric))
cor(corr_data)
corrplot::corrplot(data)
corrplot(corr_matrix)
corr_matrix <- cor(corr_data)
corrplot(corr_matrix)
